// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x72\xa2\x30\x14\x86\xaf\xe5\x29\xce\x64\xf6\xb2\xba\x96\x05\xf5\xa6\x4f\xb2\xe3\x64\x02\x1e\x59\xb6\x91\xc3\x84\xa0\x9d\xe9\xf8\xee\x3b\x21\x04\xb0\x2a\x1b\x6d\x9d\x4e\x2f\xa0\xf8\xff\x7f\x4e\xbe\x9c\x03\x54\xeb\xb2\xd6\xc0\x0a\xd4\x07\x52\xaf\xbc\x10\x3b\x64\xf0\x1e\x00\x00\xec\x85\xac\x11\x5e\x80\xfd\x78\xcf\x88\x32\x89\x3c\xa5\x5d\x59\x6b\xe4\xad\x7a\x96\x24\x72\xea\xee\x8d\xf3\xc8\x82\x63\x10\xb8\xcc\xaa\x4e\x6e\x8b\xed\x0d\x4d\xb2\xfd\xf7\x42\x70\x42\xd5\x1f\x4e\x25\x16\x5c\x8b\xcc\x33\x7b\x9b\x2b\x3c\x08\x29\x67\xc6\x3c\x35\xe6\x6b\xc1\x9b\x5c\x61\xaa\x49\x9d\x84\x4f\x7c\x93\x9d\xfb\x42\xfa\xdf\x7a\x57\x26\xf4\x76\x35\x77\x2f\xd4\x0c\x8b\x3d\xcf\x37\xc7\x69\xab\x3d\xf1\xe7\x85\x46\x55\x08\x79\xcf\xae\x9d\x77\x50\x96\xc2\x8a\x6a\x95\x22\xb0\xcb\xa7\xcb\x80\x0d\xce\xd7\xae\x65\xdc\x93\xc9\x79\xb9\x4e\x14\x00\x88\x5a\x13\x4f\x15\x8a\x93\x03\xad\xe0\x05\xb6\x42\x56\x38\xba\x72\xaf\x6f\x17\xb7\x0f\x86\x6b\x4f\xce\xd6\x6e\x35\x01\x40\x5e\xf2\x34\xdf\x28\xae\x44\x91\x35\x3c\x9e\xe7\xb3\xe6\xef\xe7\xf3\xc2\xfc\xde\x66\xb7\x19\x1e\x3d\x5d\xa1\xdc\x72\x99\x17\xaf\xff\x21\xe6\x30\x33\x60\xf8\x66\x41\xf7\x35\x9b\x13\x3a\x2b\xba\x93\xf5\x65\xdd\x3a\x69\x01\x80\x2d\xc7\xee\xd7\x10\xfe\xcd\xdc\x86\xe7\x6c\x6d\x04\x42\x4a\x3a\xb4\x5d\x52\x92\xd2\x56\x14\x86\xec\x09\xd8\x62\xb5\x58\x99\x6b\x18\xc7\x71\xcc\xd6\x56\xa3\x48\x53\x4a\xd2\xd4\xa2\xd3\xd2\x54\x77\x34\x39\x5a\xa8\x0c\xb5\x69\x3c\x9b\x70\xba\x99\x6e\xa4\xd8\xda\x17\x53\x6f\x19\xe7\xd4\xeb\xbe\x02\x94\x47\xfd\x9e\xd0\x56\x51\xf4\xab\xb9\xae\xa2\xe8\x0b\x21\xba\xb7\xc7\x8d\x20\x3b\x9b\x07\xcc\x4e\xfb\x68\xa0\x83\xbd\x7c\x84\x7a\x17\x20\xf7\x0a\xf3\x67\xe3\x1c\x53\x4d\xbe\x88\x2e\x5a\x1e\x48\x6a\xb0\xa9\xab\x9d\x17\x85\xb6\xf7\xc2\x38\x8c\xe7\xf6\x66\xb9\x5c\x7e\x47\xb3\xb5\x5f\x25\x03\xa7\x79\x30\x8a\xf2\x83\xf8\x81\x10\xdd\xc7\x72\x7c\x7a\x3f\xc3\xab\x3b\xa6\xa7\xf1\x99\xba\xb9\x35\x3d\xdb\xf1\x9b\x5a\x70\xc0\x2a\x4f\x77\x3d\x2c\x9f\x61\xbe\xa6\xa9\x37\x77\x0d\xfc\xbf\x00\x00\x00\xff\xff\x79\x21\x66\x2d\xa9\x0a\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 2729, mode: os.FileMode(420), modTime: time.Unix(1507149571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xb1\xaf\x9b\x30\x10\xc6\x77\xfe\x8a\x93\xd5\xa9\x12\xe8\x49\x9d\x33\x54\xea\xdc\xa5\x63\x15\x21\xc7\xbe\x10\x24\x63\x5b\x77\x07\x69\xfa\xc4\xff\x5e\x99\x00\x8f\xb4\x45\x0d\x43\xaa\x37\x84\x05\x30\x9f\xbf\xfb\xee\x67\x4b\xa6\xd3\x54\xeb\x83\x43\x50\x7c\x61\xc1\xa6\xb4\xa1\xd1\xb5\x57\xf0\x9a\x01\xc8\x25\x22\xec\x40\xb1\x50\xed\x2b\x95\xf5\x59\x46\xc8\xa1\x25\x83\xa0\xaa\x10\x2a\x87\xa5\xf5\x5c\x36\xda\xeb\x0a\x6d\xf9\x33\x78\x54\xa0\xd0\x77\xc3\xf0\xf5\x35\x19\x79\xdd\x20\x8c\xd7\x0e\xd4\x87\xd7\x4e\x53\x91\x64\xb5\xed\xf3\x41\x96\x01\xa4\x29\x93\x70\x16\xdd\xa4\xea\x8b\x41\x87\x6c\xa8\x8e\x52\x07\x9f\x74\x5f\xbe\x7e\x83\x64\x01\xc7\x40\x20\x27\x84\x1b\x77\x40\xdf\xd5\x14\x7c\x83\x5e\x86\x06\x42\x2b\xb1\x95\xdf\xda\x1d\xe2\x32\x52\x87\xc4\xd7\xc4\x9d\x76\x2d\x5e\x63\xac\x34\x5a\x2c\xdb\x2c\x52\xf0\xc9\xa1\x5f\x27\x45\x68\x02\xd9\x92\x51\x14\xa8\x73\xed\xac\xd1\x64\x73\xeb\xf9\x0f\x4e\x3b\x50\x1f\x8b\x3b\x8b\x4f\xe4\xfa\x2b\x9e\x88\xde\x72\x39\xd0\xf9\x3e\x15\x37\xa1\x89\xad\x60\x59\xb9\x70\xd0\xae\xd4\xd6\x12\x32\x17\xe6\x98\x8f\x8f\x6a\x3f\x2d\xf8\x5c\xff\x73\xb2\x13\x71\x6f\x2b\xf7\xe9\xe5\x25\xcb\x00\x96\x49\x36\x32\xea\x55\x32\x20\xb2\x5a\x34\x0f\x01\xe7\xc9\xff\x8c\x58\x8c\xf7\x5e\xed\xef\x03\x6c\x8e\x39\xf3\x29\x8f\x14\x7e\x5c\xfe\x06\x98\xf9\xf4\x00\xc4\x8b\xe0\xe7\x77\x84\xf5\x26\xd6\x66\x94\x62\xe2\xda\x36\x15\x13\x1f\x4b\x31\xd5\xa6\xd0\x0a\xd2\xbb\xa4\xf9\x16\x6f\x33\x55\x1b\x62\x74\x48\x6b\x64\xc7\xcf\xcf\x3d\x7a\x1f\x4d\x17\xaa\x8a\xb0\xd2\x12\x56\x89\x2e\x24\x4f\xaa\x1b\x4f\xa9\x33\xaf\x1f\x54\x67\x7e\xe2\xbc\xf3\x4c\x22\xb4\xa7\xf6\xb0\xc0\xb8\x9b\x07\x1f\xc9\x70\x2c\xbb\x5f\xfc\xd6\xcd\xfc\xfe\x37\xb8\xb1\xdb\x1b\x74\xbf\x02\x00\x00\xff\xff\x45\xee\x14\x29\x89\x0a\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2697, mode: os.FileMode(420), modTime: time.Unix(1507250584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4d\x6f\xe3\x36\x10\x3d\xd7\xbf\x82\x10\x7a\x68\x81\x95\x63\x3b\xe9\xd6\x3d\xec\xa9\xe8\x75\xdb\x43\x6f\x8b\x40\xa0\xa8\x91\x4d\x98\x11\x59\x92\xb2\xd7\x08\xf2\xdf\x0b\x92\x92\x4d\x7d\xd1\x92\xed\x6d\x37\xbb\x87\x28\x22\xe7\x0d\xf5\xde\xcc\x70\xc8\xec\xb1\xa4\x38\x65\x80\x22\xa5\x58\x42\x40\x6a\x9a\x53\x82\x35\x44\xe8\x75\x86\x90\x3e\x0a\x40\x9f\x50\xa4\xb4\xa4\xc5\x26\x9a\xbd\xcd\x66\x83\x16\x89\x90\x74\x6f\x7e\xee\xe0\x38\x68\xcd\x4b\x2d\x4a\x8d\x22\xc9\x4b\x0d\x32\x49\x31\xd9\x41\x91\x25\x0a\xe4\x9e\x92\xca\xe9\x1e\xb3\xd2\xda\xfd\xf8\xba\xe1\x7c\xc3\x20\x21\xfc\x45\x94\x1a\xda\xd3\xe7\x0e\x25\x66\x69\x5c\x8d\xc4\xf5\x48\x81\x5f\xe0\xad\xcf\x23\x4b\x13\x2a\x9c\x9f\x90\xa7\x0d\xe3\x29\x66\x09\xce\x32\x09\x4a\xcd\x49\x1e\xd7\x8f\xd5\xcf\x26\xb8\x52\xdb\x44\x48\xfe\xf5\x38\x16\xdf\x03\x3e\x0c\x60\x6a\x22\x92\x69\x8b\xf6\x40\x35\x11\xb1\x33\xee\x07\x3f\xa8\x3b\xae\x94\x48\xc8\xb6\x65\x3a\x19\xd1\x99\x35\x31\x25\x28\x5e\x4a\x02\x28\x6a\x59\xe5\x54\xc2\x01\x33\x16\xa1\xa8\x7e\x8c\x49\xee\xbc\x19\xb5\x91\xfb\x67\x1d\xee\xb1\x9c\x43\xb1\x4f\x68\xf6\x16\x93\x3c\xe6\x02\x8a\x68\x86\x50\x06\x02\x8a\x4c\x25\xbc\x40\x9f\xd0\x97\xb6\x83\x02\xf4\x81\xcb\xdd\x3c\x4d\x59\x5c\x3d\x47\xcf\x06\xdc\x3d\x9f\xc0\x2f\x9b\xd5\xd1\x37\x43\x08\x33\xc6\x0f\x15\x23\x42\x72\xcd\x09\x67\x06\x46\x13\x11\xb9\x97\x5c\x6a\xe5\xb0\xbf\x44\xeb\x45\xf4\x01\x45\x4f\x4f\x8f\xd6\xf1\x9b\x01\x70\x6c\x24\x12\x17\x1b\x50\x76\xd2\x62\x6e\xff\x3f\x2c\xa2\x67\x33\x41\x63\xb9\x01\x9d\x68\xbc\x71\xc3\x37\x27\xcd\x73\x50\x86\x66\x62\x44\x28\x3a\xa7\x86\xa7\x45\x8f\x0a\x61\x75\x2b\xd8\x9c\xcb\x03\x96\x19\x2d\x36\x89\x2c\x19\x38\xf8\xad\xd6\x22\x3e\x8f\xc4\x6e\x64\x84\xee\xc6\xd0\xb0\x4c\x45\xbd\xde\xab\x73\xbd\xe6\x19\x0d\x85\x41\x25\x83\x71\xe9\x2a\xc1\xbc\x5e\x39\x4b\x63\xf7\x42\x01\xcb\x13\x46\x8b\x9d\xc5\x33\xc2\x3b\x59\x0d\xde\x7a\x71\x1b\x3f\xea\x6a\x82\xd4\xff\xc0\x90\x6a\x52\xa4\xc6\x71\x64\xf2\x22\x48\x52\x47\x03\x2f\x7e\x6a\x0f\x1d\x5e\xba\xc4\xd8\xf9\x6e\xb2\x2d\x1a\x8a\x48\x2a\x34\xb5\x55\x23\x92\x80\x19\x3b\x22\x8c\x18\xc7\x19\x4a\x31\xc3\x05\x01\x89\xd2\x52\x23\x46\x95\x86\x0c\x61\x85\x70\x81\x0c\x08\x3a\x81\x94\x92\x25\x2f\x58\x0c\x72\x53\x8d\x37\x08\x29\x25\x8b\xcd\x3b\x9f\x92\x91\x5f\xaf\xda\x9f\xaf\x02\xdf\x3f\x4c\x82\xea\x67\xa1\x36\x98\x42\x85\xea\xe7\xe2\x66\x42\x10\x6a\x75\x21\x03\x45\xb0\x35\xcb\xe0\x9a\x5f\x7d\xac\x70\xdd\xeb\xb4\x47\x51\x05\x71\x26\x34\x11\x12\x72\xfa\xb5\xc3\x65\x4f\x14\x95\x0a\xa4\x61\x64\x4f\x33\xc8\xcc\x27\xa0\xaa\x79\x42\x3b\x38\xa2\x07\xfb\xc6\xf3\x86\x04\xa6\xd2\x26\xc4\xb9\xc5\x72\x6e\x72\xca\xe0\x27\xe3\x2b\xd0\x8c\xfd\x6c\x57\xe0\xc3\x05\x4d\xdd\x74\x46\x73\x20\x47\xc2\x00\xbd\xce\x7e\x20\x12\x0c\x56\x0a\x39\x97\x90\x64\xa0\xb4\xe4\x66\x01\x5a\x96\x60\x37\xaa\x10\x73\x95\x94\xad\x60\xac\xc4\x0c\xef\x19\x55\x05\xb7\xfc\xe5\xb8\x64\xba\xde\xc4\x6e\xec\x0e\xc7\xa6\xd4\x16\x30\xd3\xdb\x84\x6c\x81\xec\xdc\xfa\x45\x99\x32\x4a\x62\x37\x10\x57\x03\xbd\x19\x35\x50\x72\x1d\x80\xfd\x26\x5b\xa7\x7c\x17\x86\x6a\x57\xf4\xba\x48\xeb\xc5\x7a\x61\x46\x25\xfc\x53\x82\xd2\x89\xc0\x7a\xeb\xf9\x79\x70\x38\xd1\x45\x35\x3a\x4e\xef\xf3\x5d\x75\xb5\x1e\x58\xf8\xe5\x75\x8f\x6c\xfd\x4c\x4c\x84\xd6\xd8\x1b\x44\xbe\xc1\xfb\x68\x03\x5d\x23\xb8\x5e\x84\xfa\xc0\xe5\xe3\x62\xbe\x5a\x2e\x6d\x2f\xb8\x5a\x99\xf9\x8f\xbf\xcc\x97\xbf\xb9\x17\xcb\x8f\xd6\xd4\x6f\x0e\xd1\x7f\xd1\x1e\x36\xa5\x52\x6a\x3b\xb0\xeb\xf4\xe9\x74\x9a\xfd\x7e\x1a\xf6\xd5\x6a\xb5\xaa\x34\x1a\xd1\x89\x57\x13\x04\xe7\xac\x3a\x4e\x79\x94\xf6\x1c\xfb\xbc\xf9\x97\x4e\xc6\x2d\x68\xef\xf8\x77\x3e\x09\x8f\x14\xed\x6c\x3b\x4a\x35\x6f\xfa\x7b\x50\x6c\xb9\x58\x3d\xc5\x8f\xab\x5f\x3f\xae\xcf\xb9\x35\x55\xb8\x0e\xbb\xe1\x9c\x68\x9c\x95\x7a\xd9\xbd\xc4\xeb\x15\x05\x3d\xa0\x62\x70\x7f\x6a\xca\x39\x54\xd2\x6f\x2c\xe8\x8d\xc0\xbe\x9a\x15\x53\x15\x41\x29\xca\x8b\x04\xe7\x39\x2d\xa8\xb6\x4d\xd1\xe7\x3f\x3f\xff\xe1\xf6\x57\x8f\x14\x2b\xac\x8d\x86\xae\xba\x1d\x06\x7b\x35\xfe\x30\x43\xe8\x42\xed\xeb\x3b\x9c\x85\x74\xb8\xcc\xbf\x77\xa4\x9a\x98\xf6\x83\x07\x29\x83\xe3\x25\x81\x3b\xfc\xf9\x79\xf3\xf7\xef\x7f\xb5\x8e\x84\x77\xb8\x6c\xba\xbe\x94\x9d\xaa\xe4\xf8\x1c\x3b\x5c\xb8\x8a\x30\x13\xa6\xc5\xe7\x28\xc4\xc9\xf1\x38\x32\x14\x7b\x7a\xb3\x71\x7b\x71\x5f\x3c\x0e\x6f\xc9\xe1\x3d\xf9\x8a\x68\x3c\xa8\x70\x14\xda\xcd\xf3\x1e\xf1\xd7\xbe\x97\x9c\xc6\xc8\x41\x55\xf7\x20\xa3\x08\x39\xcd\xbe\x3f\x1f\xf6\x7e\xe3\x7b\xa1\x63\x12\x1b\xdf\x80\x8c\xf5\xe2\x9b\x70\xd1\xbe\xb2\xbe\xb6\x2e\x55\x57\xd7\xdd\x3f\x33\xb4\x80\x4d\x4f\x71\x09\xb8\x6e\xbf\x4e\xa8\x9e\xed\x84\xce\xcd\x19\x37\x75\xeb\x6a\xe6\x66\x9d\x3a\xec\xba\xf3\x9a\xd8\x76\x4d\x3e\xd1\xac\x9f\x9e\xae\xec\x93\x1b\x4c\x8f\x6e\xb4\x3a\x64\x0c\x31\x31\x69\x23\x98\x80\x1a\xda\x0b\x26\xe6\x64\x9f\xb0\x21\x71\x27\x67\x63\x45\x71\x38\x1f\x8d\x82\xb7\x67\x64\xcf\x9f\x7c\xfe\x0d\x00\x00\xff\xff\x91\x61\x35\x71\x83\x1c\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 7299, mode: os.FileMode(420), modTime: time.Unix(1507249256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xdc\x20\x10\xc5\xeb\xf0\x29\x46\xa3\x94\xc1\x85\x73\x6d\xaa\x28\xed\x25\x45\xba\xe8\x84\x58\x7b\xec\x45\xc7\x31\x08\xf0\x5a\xd1\xc9\xdf\x3d\xc2\x66\xbd\xbe\xdc\x9f\x5d\x69\xb5\x95\x47\xe3\xc7\x63\xf8\x3d\xe0\x21\xf9\x21\x01\x36\xec\x1a\x1e\x42\x24\x95\x74\xe8\x29\x29\xcf\x6c\x11\x9e\xc5\xa7\x83\xb6\x03\xc1\x37\xc0\xcf\xcf\x3d\x73\x6f\x49\x35\xfc\xe4\x87\xf4\x42\x59\x2d\xb5\x9c\x6b\xa7\x9f\x68\x42\x31\x09\xf1\xda\xdd\xee\x94\xf1\xd9\x17\x00\xe0\x7d\x6b\xdd\xb6\x81\x62\xac\xd6\x85\xf2\xd8\x29\xdf\xc5\x3f\x50\xe4\x21\x34\x04\xf8\xdf\xfa\xce\x04\x1a\xb5\xb5\x08\x78\x2c\xe5\xea\xb5\x6c\x9f\xa7\xcc\x43\xcc\xdb\x1f\x74\xa8\xc8\x1d\x94\x69\xa7\x93\x4e\xb2\x27\x87\x59\x4a\x69\xe4\xf0\xf8\xe6\xa4\xe5\x5f\xb5\xdb\x59\x79\xac\x0b\x00\x01\xa0\xad\xe5\xb1\x9c\xd6\x07\x4e\xdc\xb0\xcd\x36\xa9\xf1\xb8\x34\x39\xa4\xb8\x8c\xf1\x07\xef\xee\xbe\xe2\x17\xc0\xba\xae\x6b\x7c\x10\x00\x53\xb6\x28\x94\x93\xee\xe3\x2c\x3a\x1d\xe3\xe1\x43\x04\x05\x14\x6e\xe8\xcb\xb5\xb7\x02\x78\xff\xf4\x1f\x03\x7e\x71\x4b\x70\x93\xfe\x85\xde\x02\x20\x52\x8c\x86\x9d\xd2\x5d\x67\x9c\x49\x7f\xb3\xfe\xfe\xe7\xfd\x8f\x33\xc9\x72\x18\x75\x68\x8d\xeb\x55\x18\x2c\x21\x60\x8c\x7b\x79\xea\xca\xa5\xbb\x4d\xf8\x4c\xca\x31\xee\x71\xe5\xbc\x51\x5f\x78\xdb\x23\xd9\x4e\x59\xe3\x1e\xa7\xec\x92\xf3\x54\x41\xbb\x9e\x66\x97\x39\x4a\x01\x60\xbc\xda\xc6\xff\xfb\xfb\xaf\xd2\x2d\x89\xbc\xbd\xe5\xd5\xaf\xe0\x15\xab\x7d\x4a\x3e\x5e\x45\x6b\x76\xb8\x19\xaf\xfc\x02\x6e\x8c\xeb\x5f\x00\x00\x00\xff\xff\x5c\xc2\x73\xd4\xf2\x04\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xc1\x8a\x83\x30\x10\x06\xe0\xf3\xe6\x29\x86\xb0\x57\x15\x84\x5c\x84\x7d\x96\x90\x35\x83\xb5\x44\x13\x26\x33\x22\x88\xef\x5e\x4a\xad\x56\xe8\xa5\xbd\x86\xfc\xdf\xff\x0f\x61\x8e\x42\x2d\x82\xee\x62\xec\x02\xda\x36\x0e\x49\x18\xad\xf3\x9e\x30\x67\x0d\xfa\x2a\x43\xfa\x8f\x73\xd1\x27\x0d\x8b\x02\x18\xdd\x80\xf0\x07\xfa\x77\x99\x1c\x95\x38\x4e\xb6\xf7\x6b\xf1\xf2\x4b\xad\x4a\x45\xe1\x24\xbc\x87\xad\x50\x78\xa4\x01\x26\x17\x64\x03\xde\x77\x96\x87\x55\x6e\x4f\x6b\x53\xd7\x27\x17\x67\x46\x1a\x5d\xb0\xcf\x55\x5f\xba\x27\xd4\xf7\x84\x2d\x47\x3a\x8e\x5f\xd4\xcf\xce\x5e\x98\x53\x6e\xaa\xea\xb3\xd9\xc6\x18\x73\x2f\xb9\x05\x00\x00\xff\xff\xb2\xf6\x55\xa8\x69\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 361, mode: os.FileMode(420), modTime: time.Unix(1507149571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x0a\xc3\x20\x10\x05\xd0\x75\x3c\x85\x0c\x59\xb4\x9b\xde\xa0\x67\x29\x36\x99\xca\x14\x99\x91\x89\x08\xad\x78\xf7\x22\x16\xcc\xa6\xa4\x4b\xf9\x4f\x3e\xf3\xb3\x53\x72\xf7\x80\x16\xa2\xca\x13\x97\x74\xa3\x15\x6c\x31\x53\x7a\x45\xb4\x57\x0b\x5b\x52\x62\x0f\xa6\x1a\x33\xac\xa2\x27\xe1\x63\xf7\x16\xc6\x63\x85\x9c\xff\x6a\x5d\x14\x57\xe4\x44\x2e\x6c\xbf\x70\x54\xc9\xb4\xa2\x5a\xf0\x22\x3e\xf4\xf2\xdd\xbf\xc6\xe7\xf2\xa0\x80\x27\x98\x4b\x76\x7a\xd9\x85\x15\xce\x15\xcc\xf4\x1d\xa2\xd3\x46\xc6\x32\x2d\xee\xb7\x8f\xb4\xbf\x6b\xab\xff\x04\x00\x00\xff\xff\x39\xda\x2a\x22\x4d\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 333, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

